on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: false
env:
  CI: 1
  TURBO_TELEMETRY_DISABLED: 1
jobs:
  get-merge-base:
    permissions: {}
    runs-on: lynx-ubuntu-24.04-medium
    timeout-minutes: 5
    env:
      # We have 2 cases:
      #   1. Pull request
      #   2. Merge group
      BASE_REF: ${{ github.base_ref || github.event.merge_group.base_ref }}
      HEAD_REF: ${{ github.head_ref || github.event.merge_group.head_ref }}
    outputs:
      merge-base: ${{ steps.merge-base.outputs.merge-base }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ env.HEAD_REF }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          persist-credentials: false
      # Set up common variables for git operations
      - name: Setup git refs
        id: git-refs
        run: |
          # Strip refs/heads/ prefix if it exists
          BASE_REF_CLEAN=${BASE_REF#refs/heads/}
          HEAD_REF_CLEAN=${HEAD_REF#refs/heads/}
          echo "base-ref=$BASE_REF_CLEAN" >> $GITHUB_OUTPUT
          echo "head-ref=$HEAD_REF_CLEAN" >> $GITHUB_OUTPUT
      # Modified from https://github.com/rmacklin/fetch-through-merge-base
      - name: Fetch
        if: github.event_name != 'push'
        env:
          CLEAN_BASE_REF: ${{ steps.git-refs.outputs.base-ref }}
          CLEAN_HEAD_REF: ${{ steps.git-refs.outputs.head-ref }}
          UPSTREAM_REMOTE: ${{ github.server_url }}/${{ github.repository }}
        run: |
          git remote add upstream $UPSTREAM_REMOTE
          git fetch --progress --depth=1 upstream "+refs/heads/$CLEAN_BASE_REF:refs/remotes/upstream/$CLEAN_BASE_REF"
          MAX_ATTEMPTS=10
          ATTEMPT=0
          while [ -z "$( git merge-base "refs/remotes/upstream/$CLEAN_BASE_REF" "$CLEAN_HEAD_REF" )" ] && [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
            git fetch -q --deepen=10 upstream "refs/heads/$CLEAN_BASE_REF:refs/remotes/upstream/$CLEAN_BASE_REF"
            git fetch -q --deepen=10 origin "$CLEAN_HEAD_REF"
            ATTEMPT=$((ATTEMPT + 1))
          done
          if [ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]; then
            echo "Failed to determine merge base after $MAX_ATTEMPTS attempts." >&2
            exit 1
          fi
      - name: Get merge base
        id: merge-base
        env:
          CLEAN_BASE_REF: ${{ format('upstream/{0}', steps.git-refs.outputs.base-ref) || github.event.base }}
          CLEAN_HEAD_REF: ${{ steps.git-refs.outputs.head-ref }}
        run: |
          echo "merge-base=$(git merge-base "$CLEAN_BASE_REF" "$CLEAN_HEAD_REF" || git rev-parse "$CLEAN_BASE_REF")" >> $GITHUB_OUTPUT
  build-all:
    permissions: {}
    name: Build (${{ matrix.runs-on.name }})
    runs-on: ${{ matrix.runs-on.label }}
    strategy:
      matrix:
        runs-on:
          - label: lynx-ubuntu-24.04-xlarge
            name: Ubuntu
          - label: lynx-windows-2022-large
            name: Windows
    timeout-minutes: 30
    needs: get-merge-base
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"
      - name: TurboCache
        uses: lynx-infra/cache@5c6160a6a4c7fca80a2f3057bb9dfc9513fcb732
        with:
          path: .turbo
          key: turbo-v4-${{ runner.os }}-${{ hashFiles('**/packages/**/src/**/*.rs') }}-${{ github.sha }}
          # We can restore caches from:
          #   1. Previous commit from base branch (merge base or base SHA)
          #   2. Any cache
          restore-keys: |
            turbo-v4-${{ runner.os }}-${{ hashFiles('**/packages/**/src/**/*.rs') }}-${{ needs.get-merge-base.outputs.merge-base }}
            turbo-v4-${{ runner.os }}-${{ hashFiles('**/packages/**/src/**/*.rs') }}-${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha || github.event.push.before }}
            turbo-v4-${{ runner.os }}-${{ hashFiles('**/packages/**/src/**/*.rs') }}-
            turbo-v4-${{ runner.os }}-
      - name: Install wasm-bindgen
        uses: taiki-e/install-action@bbdef1c33cb8ed1fd122d68d8374ac79998d6960 # v2
        with:
          tool: wasm-bindgen
      - name: Install
        run: |
          npm install -g corepack@latest
          corepack enable
          pnpm install --frozen-lockfile
      - name: Build
        id: build
        run: |
          pnpm turbo build --summarize
        env:
          NODE_OPTIONS: --max-old-space-size=32768
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
      - name: Upload turbo summary
        if: runner.debug == '1'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: turbo-summary-${{ github.sha }}
          path: .turbo/runs/*.json
          retention-days: 1
          overwrite: true
          include-hidden-files: true
      - name: Setup Rust and retry build if failed
        if: steps.build.outcome == 'failure'
        uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1
        with:
          target: wasm32-unknown-unknown
          cache-key: test-${{ runner.os }}
      - name: Retry Build
        if: steps.build.outcome == 'failure'
        run: |
          pnpm turbo build --summarize
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
